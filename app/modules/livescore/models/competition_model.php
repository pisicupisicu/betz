<?php/** * Competition Model * * Manages competitions * * @author Weblight.ro * @copyright Weblight.ro * @package BJ Tool */class Competition_model extends CI_Model {    private $CI;    function __construct()     {        parent::__construct();        $this->CI = & get_instance();    }    /**     * Get Competitions     *     *     * @return array     */    function get_competitions($filters = array())     {        $this->load->model('match_model');        $row = array();        $order_dir = (isset($filters['sort_dir'])) ? $filters['sort_dir'] : 'ASC';        if (isset($filters['country_id']))            $this->db->where('country_id', $filters['country_id']);        if (isset($filters['country_name']))            $this->db->like('country_name', $filters['country_name']);        if (isset($filters['limit'])) {            $offset = (isset($filters['offset'])) ? $filters['offset'] : 0;            $this->db->limit($filters['limit'], $offset);        }        $this->db->join('z_countries', 'z_competitions.country_id = z_countries.ID', 'left');        $this->db->order_by('country_name,name', $order_dir);        $result = $this->db->get('z_competitions');        foreach ($result->result_array() as $linie) {            $linie['matches'] = $this->match_model->get_no_of_matches_by_competition_id($linie['competition_id']);                        $row[] = $linie;        }        return $row;    }    /**     * Get Competition     *     * @param int $id	     *     * @return array     */    function get_competition($id)     {        $row = array();        $this->db->join('z_countries', 'z_competitions.country_id = z_countries.ID', 'left');        $this->db->where('competition_id', $id);        $result = $this->db->get('z_competitions');        foreach ($result->result_array() as $row) {            return $row;        }        return $row;    }        /**     * Get Competition by link     *     * @param string $link	     *     * @return array     */    function get_competition_by_link($link)     {        $row = array();        $this->db->join('z_countries', 'z_competitions.country_id = z_countries.ID', 'left');        $this->db->where('link', $link);        $result = $this->db->get('z_competitions');        foreach ($result->result_array() as $row) {            return $row;        }        return $row;    }        /**     * Get Competition by link complete     *     * @param string $link_complete	     *     * @return array     */    function get_competition_by_link_complete($link_complete)     {        $row = array();        $this->db->join('z_countries', 'z_competitions.country_id = z_countries.ID', 'left');        $this->db->where('link_complete', $link_complete);        $result = $this->db->get('z_competitions');        foreach ($result->result_array() as $row) {            return $row;        }        return $row;    }        /**     * Create New Competition     *     * Creates a new competition     *     * @param array $insert_fields	     *     * @return int $insert_id     */    function new_competition($insert_fields)     {        $this->db->insert('z_competitions', $insert_fields);        $insert_id = $this->db->insert_id();        return $insert_id;    }    /**     * Update Competition     *     * Updates competition     *      * @param array $update_fields     * @param int $id	     *     * @return boolean TRUE     */    function update_competition($update_fields, $id)     {        $this->db->update('z_competitions', $update_fields, array('competition_id' => $id));        return $id;    }    public function update_competition_by_link($update_fields, $link)     {        $this->db->update('z_competitions', $update_fields, array('link' => $link));        return TRUE;    }    function competition_exists($competition)     {        //link is unique!        $this->db->where('link', $competition['link']);        $result = $this->db->get('z_competitions');        foreach ($result->result_array() as $row) {            return $row['competition_id'];        }        return $result->num_rows();    }    /**     * Delete competition     *     * Deletes competition     * 	     * @param int $id	     * @return boolean TRUE     */    function delete_competition($id)     {        $this->db->delete('z_competitions', array('competition_id' => $id));        return TRUE;    }    function get_num_rows($competition_id, $filters)     {        $this->db->where('competition_id', $competition_id);        $result = $this->db->get('z_competitions');        return $result->num_rows();    }    function get_num_rowz($filters)     {        if (isset($filters['country_name']))            $this->db->like('country_name', $filters['country_name']);        $this->db->join('z_countries', 'z_competitions.country_id = z_countries.ID', 'left');        $result = $this->db->get('z_competitions');        return $result->num_rows();    }    function fix_competitions()     {        $row = array();        $result = $this->db->get('z_competitions');        $this->load->model('country_model');        foreach ($result->result_array() as $linie) {            $link = $linie['link'];            $aux = explode('/', $link);            $country_name = ucfirst(trim($aux[0]));            $country_id = $this->country_model->get_country_by_name($country_name);            $name = ucfirst(trim($aux[1]));            $data_competition = array(                'country_id' => $country_id,                'name' => $name,                'link_complete' => 'http://www.livescore.com/soccer/' . $link . '/',            );            if (!$linie['country_id'] || !$linie['name'] || !$linie['link_complete']) {                $this->update_competition($data_competition, $linie['competition_id']);            }        }        return $row;    }    function fix_competitions_name()     {        $row = array();        $result = $this->db->get('z_competitions');        $this->load->model('competition_model');        foreach ($result->result_array() as $linie) {            $linie['name'] = str_replace('</span>', '', $linie['name']);            $data_competition = array(                'name' => $linie['name'],            );            $this->update_competition($data_competition, $linie['competition_id']);        }        return $row;    }    // http://stackoverflow.com/questions/16029729/mysql-error-commands-out-of-sync-you-cant-run-this-command-now    function get_competitions_by_country_procedure($filters = array())     {        if (isset($filters['countryId'])) {            $countryId = $filters['countryId'];        } else {            $countryId = 1;        }        $result = $this->db->query("CALL GetCompetitionsByCountryId( $countryId )");        $result->next_result();        //$result->free_result();        $res = $result->result_array();        $count = count($res);        if ($count > 0) {            if (isset($filters['numRows'])) {                return $count;            }            return $res;        } else {            return 0;        }    }    function get_competitions_by_country_with_filters($filters = array())     {        return array_slice($filters['data'], isset($filters['offset']) ? (int) $filters['offset'] : 0, isset($filters['limit']) ? (int) $filters['limit'] : 20);    }    /**     * Get Matches with score     *     *     * @return array     */    function get_matches_with_score($filters = array())     {        $this->load->model('team_model');        $row = array();        //$filters['match_date_start'] = '2014-02-02';        $order_dir = (isset($filters['sort_dir'])) ? $filters['sort_dir'] : 'ASC';        if (isset($filters['sort']))            $this->db->order_by($filters['sort'], $order_dir);        if (isset($filters['country_name']) && $filters['country_name'])            $this->db->like('country_name', $filters['country_name']);        if (isset($filters['competition_name']) && $filters['competition_name'])            $this->db->like('z_competitions.name', $filters['competition_name']);        if (isset($filters['team1']) && $filters['team1'])            $this->db->like('zt1.name', $filters['team1']);        if (isset($filters['team2']) && $filters['team2'])            $this->db->like('zt2.name', $filters['team2']);        if (isset($filters['score']) && $filters['score'])            $this->db->like('score', $filters['score']);        if (isset($filters['match_date_start']) && !empty($filters['match_date_start']))            $this->db->where('match_date', $filters['match_date_start']);        //if(isset($filters['match_date_end']) && !empty($filters['match_date_end'])) $this->db->where('match_date <=',$filters['match_date_end']);        // if (isset($filters['limit'])) {        //     $offset = (isset($filters['offset'])) ? $filters['offset'] : 0;        //     $this->db->limit($filters['limit'], $offset);        // }        if (isset($filters['team1']) && $filters['team1']) {            $this->db->join('z_teams AS zt1', 'z_matches.team1 = zt1.team_id', 'inner');        }        if (isset($filters['team2']) && $filters['team2']) {            $this->db->join('z_teams AS zt2', 'z_matches.team2 = zt2.team_id', 'inner');        }        $this->db->join('z_competitions', 'z_matches.competition_id = z_competitions.competition_id', 'inner');        $this->db->join('z_countries', 'z_competitions.country_id = z_countries.ID', 'left');        $this->db->select('*,z_matches.link_complete AS link_match');        $result = $this->db->get('z_matches');        print '<pre>';        $total = $correct = $wrong = $correctPercent = $wrongPercent = 0;        $correctEast17 = $wrongEast17 = $correctCounter17 = $wrongCounter17 = 0;        $min = 17;        $max = 30;        $east17 = false;        $counter17 = true;        $bank = 0;        $stake = 2;        $odds = 1.5;        $profitEast17 = $profitCounter17 = 0;        $laOver = $laUnder = 0;        $overs = $unders = 0;        $final85 = false;        $min85 = 85; //75        $profitFinal85 = $correctFinal85 = $wrongFinal85 = 0;        $oddsFinal85 = 3.5; //2        $final45 = true;        $min45 = 45;        $profitFinal45 = $correctFinal45 = $wrongFinal45 = 0;        $oddsFinal45 = 2;        $intervals = array('1-15' => 0, '16-30' => 0, '31-45' => 0, '46-60' => 0, '61-75' => 0, '76-90' => 0);        foreach ($result->result_array() as $linie) {            $temp = $this->team_model->get_team($linie['team1']);            $linie['team1'] = $temp['name'];            $temp = $this->team_model->get_team($linie['team2']);            $linie['team2'] = $temp['name'];            $linie['competition_name'] = $linie['name'];            $row[] = $linie;            $this->db->where('match_id', $linie['id']);            $this->db->order_by('min');            $result2 = $this->db->get('z_goals');            foreach ($result2->result_array() as $linie2) {                //print_r($linie2);                if ($linie2['min'] <= $min) {                    $east17 = true;                }                if ($linie2['min'] < $max) {                    $counter17 = false;                }                if ($linie2['min'] < $min45) {                    $final45 = false;                }                if ($linie2['min'] >= $min85) {                    $final85 = true;                }                if ($linie2['min'] <= 15) {                    $intervals['1-15'] ++;                } elseif ($linie2['min'] >= 16 && $linie2['min'] <= 30) {                    $intervals['16-30'] ++;                } elseif ($linie2['min'] >= 31 && $linie2['min'] <= 45) {                    $intervals['31-45'] ++;                } elseif ($linie2['min'] >= 46 && $linie2['min'] <= 60) {                    $intervals['46-60'] ++;                } elseif ($linie2['min'] >= 61 && $linie2['min'] <= 75) {                    $intervals['61-75'] ++;                } elseif ($linie2['min'] >= 76 && $linie2['min'] <= 90) {                    $intervals['76-90'] ++;                }            }            if ($east17) {                if ($this->isOver($linie['score'], 3)) {                    $correct++;                    $bank += $stake * $odds - $stake;                    $profitEast17 += $stake * $odds - $stake;                    $correctEast17++;                } else {                    $wrong++;                    $bank -= 2;                    $profitEast17 -= 2;                    $wrongEast17++;                }            }            if ($counter17) {                if ($this->isOver($linie['score'], 3)) {                    $wrong++;                    $bank -= 2;                    $wrongCounter17++;                    $profitCounter17 -= 2;                } else {                    $correct++;                    $bank += $stake * $odds - $stake;                    $profitCounter17 += $stake * $odds - $stake;                    $correctCounter17++;                }            }            if ($final85) {                $correct++;                $correctFinal85++;                $bank += $stake * $oddsFinal85 - $stake;                $profitFinal85 += $stake * $oddsFinal85 - $stake;            } else {                $wrongFinal85++;                $bank -= 2;                $profitFinal85 -= 2;                $wrong++;            }            if ($this->isOver($linie['score'], 3)) {                $overs++;                $laOver += $stake * $odds - $stake;                $laUnder -= 2;            } else {                $laUnder += $stake * $odds - $stake;                $laOver -= 2;                $unders++;            }            if ($final45) {                if ($this->isOver($linie['score'], 2)) {                    $correct++;                    $correctFinal45++;                    $bank += $stake * $oddsFinal45 - $stake;                    $profitFinal45 += $stake * $oddsFinal45 - $stake;                } else {                    $wrong++;                    $wrongFinal45++;                    $bank -= 2;                    $profitFinal45 -= 2;                }            }            //print_r($linie);            $total++;            // reset counters            $east17 = false;            $counter17 = true;            $final85 = false;            $final45 = true;        }        $bets = $correct + $wrong;        $correctPercent = number_format($correct * 100 / $bets, 2);        $wrongPercent = number_format($wrong * 100 / $bets, 2);        $betsEast17 = $correctEast17 + $wrongEast17;        $correctPercentEast17 = number_format($correctEast17 * 100 / $betsEast17, 2);        $wrongPercentEast17 = number_format($wrongEast17 * 100 / $betsEast17, 2);        $betsCounter17 = $correctCounter17 + $wrongCounter17;        $correctPercentCounter17 = number_format($correctCounter17 * 100 / $betsCounter17, 2);        $wrongPercentCounter17 = number_format($wrongCounter17 * 100 / $betsCounter17, 2);        $betsFinal85 = $correctFinal85 + $wrongFinal85;        $correctPercentFinal85 = number_format($correctFinal85 * 100 / $betsFinal85, 2);        $wrongPercentFinal85 = number_format($wrongFinal85 * 100 / $betsFinal85, 2);        $betsFinal45 = $correctFinal45 + $wrongFinal45;        $correctPercentFinal45 = number_format($correctFinal45 * 100 / $betsFinal45, 2);        $wrongPercentFinal45 = number_format($wrongFinal45 * 100 / $betsFinal45, 2);        $oversPercent = number_format($overs * 100 / $total, 2);        $undersPercent = number_format($unders * 100 / $total, 2);        echo $filters['match_date_start'] . '<br/>';        echo "<br/>-------------------------------------------------------------------<br/>";        echo "CORRECT EAST17 $correctEast17  WRONG EAST17 $wrongEast17<br/>";        echo "CORRECT PERCENT EAST 17 $correctPercentEast17 % WRONG PERCENT EAST17 $wrongPercentEast17 %<br/>";        echo "PROFIT EAST17 $profitEast17 &euro;<br/>";        echo "<br/>-------------------------------------------------------------------<br/>";        echo "CORRECT COUNTER17 $correctCounter17 WRONG COUNTER17 $wrongCounter17<br/>";        echo "CORRECT PERCENT COUNTER17 $correctPercentCounter17 % WRONG PERCENT COUNTER17 $wrongPercentCounter17 %<br/>";        echo "PROFIT COUNTER17 $profitCounter17 &euro;<br/>";        echo "<br/>-------------------------------------------------------------------<br/>";        echo "CORRECT FINAL85 $correctFinal85 WRONG FINAL85 $wrongFinal85<br/>";        echo "CORRECT PERCENT FINAL85 $correctPercentFinal85 % WRONG PERCENT FINAL85 $wrongPercentFinal85 %<br/>";        echo "PROFIT FINAL85 $profitFinal85 &euro;<br/>";        echo "<br/>-------------------------------------------------------------------<br/>";        echo "CORRECT FINAL45 $correctFinal45 WRONG FINAL45 $wrongFinal45<br/>";        echo "CORRECT PERCENT FINAL45 $correctPercentFinal45 % WRONG PERCENT FINAL45 $wrongPercentFinal45 %<br/>";        echo "PROFIT FINAL45 $profitFinal45 &euro;<br/>";        echo "<br/>-------------------------------------------------------------------<br/>";        echo "CORRECT $correct WRONG $wrong TOTAL BETS $bets<br/>";        echo "CORRECT PERCENT $correctPercent % WRONG PERCENT $wrongPercent %<br/>";        echo "BANK $bank &euro;<br/>";        echo "<br/>-------------------------------------------------------------------<br/>";        echo "LA OVER $laOver &euro; LA UNDER $laUnder &euro;<br/>";        echo "OVERS PERCENT $oversPercent % UNDERS PERCENT $undersPercent %<br/>";        echo "TOTAL MATCHES $total";        $goals = 0;        foreach ($intervals as $interval) {            $goals += $interval;        }        foreach ($intervals as $key => $interval) {            $intervals[$key] = number_format($interval * 100 / $goals, 2) . '%';        }        print_r($intervals);        die;        return $row;    }    protected function isOver($score, $goalNumber)     {        $goals = explode('-', $score);        $sum = $goals[0] + $goals[1];        if ($sum >= $goalNumber)            return true;        return false;    }}